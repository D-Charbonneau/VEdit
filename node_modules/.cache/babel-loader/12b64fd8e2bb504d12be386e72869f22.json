{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport function checkPassword(pass, confirm) {\n  return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\n}\nexport default class API {\n  static signUp(formValues) {\n    const userID = uuidv4();\n    const {\n      password,\n      confirmPassword,\n      ...user\n    } = formValues;\n\n    if (user.username && user.email && password && checkPassword(password, confirmPassword)) {\n      let grabData = window.localStorage.getItem(\"userData\");\n\n      if (!grabData) {\n        grabData = JSON.stringify([]);\n      }\n\n      let oldData = JSON.parse(grabData);\n      const hashedPassword = btoa(password + userID);\n      oldData.push({\n        id: userID,\n        ...user,\n        pfp: process.env.PUBLIC_URL + '/images/defaultpfp.png',\n        pass: hashedPassword\n      });\n      window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    } else if (!user.username) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Username\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    } else if (!user.email) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Email\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({\n          data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n  static login(username, password) {\n    return new Promise((resolve, reject) => {\n      let users;\n\n      if (window.localStorage.getItem(\"userData\") !== null) {\n        users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\n      }\n\n      for (let i = 0; i < users.length; i++) {\n        if (users[i].username === username && users[i].pass === btoa(password + users[i].id)) {\n          setTimeout(() => {\n            resolve({\n              data: users[i],\n              status: \"success\"\n            });\n          }, Math.random() * 500 + 1000);\n        }\n      }\n\n      setTimeout(() => {\n        resolve({\n          data: {\n            message: \"Could not find user or invalid credentials\"\n          },\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n  static changeUsername(oldPass, username, confirmUsername) {\n    return new Promise((resolve, reject) => {\n      if (username === confirmUsername) {\n        let users;\n        let found = -1;\n\n        if (window.localStorage.getItem(\"userData\") !== null) {\n          users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\n        }\n\n        for (let i = 0; i < users.length; i++) {\n          if (users[i].pass === oldPass) {\n            found = i;\n            break;\n          }\n        }\n\n        if (found === -1) {\n          setTimeout(() => {\n            resolve({\n              data: {\n                message: \"Could not find user\"\n              },\n              status: \"error\"\n            });\n          }, Math.random() * 500 + 1000);\n        } else {\n          users[found].username = username;\n          window.localStorage.setItem(\"userData\", JSON.stringify(users));\n          setTimeout(() => {\n            resolve({\n              data: {\n                message: users[found]\n              },\n              status: \"success\"\n            });\n          }, Math.random() * 500 + 1000);\n        }\n      } else {\n        setTimeout(() => {\n          resolve({\n            data: {\n              message: \"Usernames do not match\"\n            },\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      }\n    });\n  }\n\n  static changePassword(uuid, oldPassword, password, confirmPassword) {}\n\n}","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/dataLayer/api.ts"],"names":["v4","uuidv4","checkPassword","pass","confirm","test","length","API","signUp","formValues","userID","password","confirmPassword","user","username","email","grabData","window","localStorage","getItem","JSON","stringify","oldData","parse","hashedPassword","btoa","push","id","pfp","process","env","PUBLIC_URL","setItem","Promise","resolve","reject","setTimeout","data","status","Math","random","login","users","String","i","message","changeUsername","oldPass","confirmUsername","found","changePassword","uuid","oldPassword"],"mappings":"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","sourcesContent":["import { SignUpFormValues } from \"../components/public/signUp\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype APIResponse = {\r\n    data?: any,\r\n    status: string;\r\n}\r\n\r\nexport function checkPassword(pass: string, confirm: string)\r\n{\r\n    return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\r\n}\r\n\r\nexport default class API\r\n{\r\n    static signUp(formValues: SignUpFormValues): Promise<APIResponse>\r\n    {\r\n        const userID = uuidv4();\r\n        const { password, confirmPassword, ...user } = formValues;\r\n        if (user.username && user.email && password && checkPassword(password, confirmPassword))\r\n        {\r\n            let grabData = window.localStorage.getItem(\"userData\");\r\n            if (!grabData)\r\n            {\r\n                grabData = JSON.stringify([]);\r\n            }\r\n            let oldData: any = JSON.parse(grabData);\r\n            const hashedPassword = btoa(password + userID);\r\n            oldData.push({ id: userID, ...user, pfp: process.env.PUBLIC_URL + '/images/defaultpfp.png', pass: hashedPassword });\r\n            window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\r\n            return new Promise((resolve: Function, reject: Function) =>\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        else if (!user.username)\r\n        {\r\n            return new Promise((resolve: Function, reject: Function) =>\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    resolve({\r\n                        data: \"Missing Username\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        else if (!user.email)\r\n        {\r\n            return new Promise((resolve: Function, reject: Function) =>\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    resolve({\r\n                        data: \"Missing Email\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        return new Promise((resolve: Function, reject: Function) =>\r\n        {\r\n            setTimeout(() =>\r\n            {\r\n                resolve({\r\n                    data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n    static login(username: string, password: string)\r\n    {\r\n        return new Promise<APIResponse>((resolve: Function, reject: Function) =>\r\n        {\r\n            let users: any;\r\n            if (window.localStorage.getItem(\"userData\") !== null)\r\n            {\r\n                users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\r\n            }\r\n\r\n            for (let i = 0; i < users.length; i++)\r\n            {\r\n                if (users[i].username === username && users[i].pass === btoa(password + users[i].id))\r\n                {\r\n                    setTimeout(() =>\r\n                    {\r\n                        resolve({\r\n                            data: users[i],\r\n                            status: \"success\"\r\n                        });\r\n                    }, Math.random() * 500 + 1000)\r\n                }\r\n            }\r\n            setTimeout(() =>\r\n            {\r\n                resolve({\r\n                    data:\r\n                        { message: \"Could not find user or invalid credentials\" },\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n    static changeUsername(oldPass: string, username: string, confirmUsername: string)\r\n    {\r\n        return new Promise<APIResponse>((resolve: Function, reject: Function) =>\r\n        {\r\n            if (username === confirmUsername)\r\n            {\r\n                let users: any;\r\n                let found = -1;\r\n                if (window.localStorage.getItem(\"userData\") !== null)\r\n                {\r\n                    users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\r\n                }\r\n                for (let i = 0; i < users.length; i++)\r\n                {\r\n                    if (users[i].pass === oldPass)\r\n                    {\r\n                        found = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found === -1)\r\n                {\r\n                    setTimeout(() =>\r\n                    {\r\n                        resolve({\r\n                            data:\r\n                                { message: \"Could not find user\" },\r\n                            status: \"error\"\r\n                        });\r\n                    }, Math.random() * 500 + 1000)\r\n                }\r\n                else\r\n                {\r\n                    users[found].username = username;\r\n                    window.localStorage.setItem(\"userData\", JSON.stringify(users));\r\n                    setTimeout(() =>\r\n                    {\r\n                        resolve({\r\n                            data:\r\n                                { message: users[found] },\r\n                            status: \"success\"\r\n                        });\r\n                    }, Math.random() * 500 + 1000)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    resolve({\r\n                        data:\r\n                            { message: \"Usernames do not match\" },\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            }\r\n        })\r\n    }\r\n    static changePassword(uuid: string, oldPassword: string, password: string, confirmPassword: string)\r\n    {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}