{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boome\\\\Desktop\\\\vedit\\\\src\\\\contexts\\\\globalContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport API from \"../dataLayer/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalContext = /*#__PURE__*/createContext({\n  state: {\n    loggedIn: false\n  }\n});\nexport function GlobalContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState({\n    loggedIn: false\n  });\n\n  const handleLogIn = async formValues => {\n    if (formValues.username && formValues.password) {\n      const result = await API.login(formValues.username, formValues.password);\n\n      if (result.status == \"success\") {\n        setState({\n          loggedIn: true\n        }); //SUCCESS LOGIN\n      }\n    }\n  };\n\n  const handleLogOut = () => {\n    setState({\n      loggedIn: false\n    });\n  };\n\n  const ProviderObj = {\n    state,\n    onLogin: handleLogIn,\n    onLogout: handleLogOut\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: ProviderObj,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalContextProvider, \"58LXjxDXElWvv1aJS8yD6nyYvUA=\");\n\n_c = GlobalContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/contexts/globalContext.tsx"],"names":["createContext","useState","API","GlobalContext","state","loggedIn","GlobalContextProvider","children","setState","handleLogIn","formValues","username","password","result","login","status","handleLogOut","ProviderObj","onLogin","onLogout"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;;AAuBA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAgB;AAAEI,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAAT,CAAhB,CAAnC;AAEP,OAAO,SAASC,qBAAT,OACP;AAAA;;AAAA,MADsC;AAAEC,IAAAA;AAAF,GACtC;AACI,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBP,QAAQ,CAAc;AAAEI,IAAAA,QAAQ,EAAE;AAAZ,GAAd,CAAlC;;AAEA,QAAMI,WAAW,GAAG,MAAOC,UAAP,IACpB;AACI,QAAIA,UAAU,CAACC,QAAX,IAAuBD,UAAU,CAACE,QAAtC,EACA;AACI,YAAMC,MAAM,GAAG,MAAMX,GAAG,CAACY,KAAJ,CAAUJ,UAAU,CAACC,QAArB,EAA+BD,UAAU,CAACE,QAA1C,CAArB;;AACA,UAAIC,MAAM,CAACE,MAAP,IAAiB,SAArB,EACA;AACIP,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,QAAQ,EAAE;AAAZ,SAAD,CAAR,CADJ,CAEI;AACH;AACJ;AACJ,GAXD;;AAaA,QAAMW,YAAY,GAAG,MACrB;AACIR,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMY,WAAW,GAAG;AAChBb,IAAAA,KADgB;AAEhBc,IAAAA,OAAO,EAAET,WAFO;AAGhBU,IAAAA,QAAQ,EAAEH;AAHM,GAApB;AAMA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEC,WAA/B;AAAA,cACKV;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAjCeD,qB;;KAAAA,qB","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\r\nimport { LoginFormValues } from \"../components/public/login\";\r\nimport API from \"../dataLayer/api\";\r\n\r\ntype User = {\r\n    email: string;\r\n    id: string;\r\n    pass: string;\r\n    username: string;\r\n}\r\n\r\ntype GlobalState = {\r\n    loggedIn: boolean;\r\n    user?: User;\r\n}\r\n\r\ntype ProviderState = {\r\n    state: GlobalState;\r\n    onLogin?: (formValues: LoginFormValues) => any;\r\n    onLogout?: () => void;\r\n}\r\n\r\ntype Props = {\r\n    children: ReactNode;\r\n}\r\nexport const GlobalContext = createContext<ProviderState>({ state: { loggedIn: false } });\r\n\r\nexport function GlobalContextProvider({ children }: Props)\r\n{\r\n    const [state, setState] = useState<GlobalState>({ loggedIn: false })\r\n\r\n    const handleLogIn = async (formValues: LoginFormValues) =>\r\n    {\r\n        if (formValues.username && formValues.password)\r\n        {\r\n            const result = await API.login(formValues.username, formValues.password);\r\n            if (result.status == \"success\")\r\n            {\r\n                setState({ loggedIn: true })\r\n                //SUCCESS LOGIN\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleLogOut = () =>\r\n    {\r\n        setState({ loggedIn: false })\r\n    }\r\n\r\n    const ProviderObj = {\r\n        state,\r\n        onLogin: handleLogIn,\r\n        onLogout: handleLogOut\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={ProviderObj}>\r\n            {children}\r\n            { }\r\n        </GlobalContext.Provider>)\r\n}"]},"metadata":{},"sourceType":"module"}