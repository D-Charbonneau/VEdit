{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boome\\\\Desktop\\\\vedit\\\\src\\\\views\\\\public\\\\login.view.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport API from \"../../dataLayer/api\";\nimport Login from \"../../components/public/login\";\nimport { Container } from \"semantic-ui-react\";\nimport { GlobalContext, GlobalContextProvider } from \"../../contexts/globalContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LoginView() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSignIn = async formValues => {\n    const {\n      username,\n      password\n    } = formValues;\n\n    if (!username || !password) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const result = await API.login(username, password);\n\n      if (result.status == \"success\") {//SUCCESS LOGIN\n      }\n    } catch (e) {} finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContextProvider, {\n    children: /*#__PURE__*/_jsxDEV(GlobalContext.Consumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Login, {\n          onSuccess: value.onLogin,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginView, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n\n_c = LoginView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginView\");","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/views/public/login.view.tsx"],"names":["useState","API","Login","Container","GlobalContext","GlobalContextProvider","LoginView","loading","setLoading","handleSignIn","formValues","username","password","result","login","status","e","value","onLogin"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,KAAP,MAAuC,+BAAvC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,aAAT,EAAwBC,qBAAxB,QAAqD,8BAArD;;AAEA,OAAO,SAASC,SAAT,GACP;AAAA;;AACI,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAU,KAAV,CAAtC;;AACA,QAAMS,YAAY,GAAG,MAAOC,UAAP,IACrB;AACI,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBF,UAA/B;;AAEA,QAAI,CAACC,QAAD,IAAa,CAACC,QAAlB,EACA;AACI;AACH;;AAEDJ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QACA;AACI,YAAMK,MAAM,GAAG,MAAMZ,GAAG,CAACa,KAAJ,CAAUH,QAAV,EAAoBC,QAApB,CAArB;;AACA,UAAIC,MAAM,CAACE,MAAP,IAAiB,SAArB,EACA,CACI;AACH;AACJ,KAPD,CAQA,OAAOC,CAAP,EACA,CAEC,CAXD,SAaA;AACIR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GA3BD;;AA4BA,sBACI,QAAC,qBAAD;AAAA,2BACI,QAAC,aAAD,CAAe,QAAf;AAAA,gBACKS,KAAK,iBAEF,QAAC,SAAD;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,SAAS,EAAEA,KAAK,CAACC,OAAxB;AAAiC,UAAA,OAAO,EAAEX;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA3CeD,S;;KAAAA,S","sourcesContent":["import { useState } from \"react\";\r\nimport API from \"../../dataLayer/api\"\r\nimport Login, { LoginFormValues } from \"../../components/public/login\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { GlobalContext, GlobalContextProvider } from \"../../contexts/globalContext\";\r\n\r\nexport function LoginView()\r\n{\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const handleSignIn = async (formValues: LoginFormValues) =>\r\n    {\r\n        const { username, password } = formValues;\r\n\r\n        if (!username || !password)\r\n        {\r\n            return\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        try\r\n        {\r\n            const result = await API.login(username, password);\r\n            if (result.status == \"success\")\r\n            {\r\n                //SUCCESS LOGIN\r\n            }\r\n        }\r\n        catch (e)\r\n        {\r\n\r\n        }\r\n        finally\r\n        {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    return (\r\n        <GlobalContextProvider>\r\n            <GlobalContext.Consumer>\r\n                {value =>\r\n                \r\n                    <Container>\r\n                        <Login onSuccess={value.onLogin} loading={loading} />\r\n                    </Container>\r\n                }\r\n            </GlobalContext.Consumer>\r\n        </GlobalContextProvider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}