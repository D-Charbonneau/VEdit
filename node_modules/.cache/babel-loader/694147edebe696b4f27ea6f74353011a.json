{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport default class API {\n  static signUp(formValues) {\n    const userID = uuidv4();\n    const {\n      password,\n      confirmPassword,\n      ...user\n    } = formValues;\n\n    if (password === confirmPassword && user.username && user.email && user.firstname && user.lastname) {\n      window.localStorage.setItem(userID, JSON.stringify(user));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    }\n  }\n\n  static login(username, password) {\n    return new Promise((resolve, reject) => {\n      const hashedPassword = btoa(username + password);\n      const userJSON = window.localStorage.getItem(hashedPassword);\n\n      if (userJSON) {\n        const user = JSON.parse(userJSON);\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      }\n\n      setTimeout(() => {\n        resolve({\n          data: {\n            message: \"Could not find user\"\n          },\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/dataLayer/api.ts"],"names":["v4","uuidv4","API","signUp","formValues","userID","password","confirmPassword","user","username","email","firstname","lastname","window","localStorage","setItem","JSON","stringify","Promise","resolve","reject","setTimeout","data","status","Math","random","login","hashedPassword","btoa","userJSON","getItem","parse","message"],"mappings":"AACA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAOA,eAAe,MAAMC,GAAN,CAAU;AACR,SAANC,MAAM,CAACC,UAAD,EAAqD;AAC9D,UAAMC,MAAM,GAAGJ,MAAM,EAArB;AACA,UAAM;AAAEK,MAAAA,QAAF;AAAYC,MAAAA,eAAZ;AAA6B,SAAGC;AAAhC,QAAyCJ,UAA/C;;AACA,QAAIE,QAAQ,KAAKC,eAAb,IAAgCC,IAAI,CAACC,QAArC,IAAiDD,IAAI,CAACE,KAAtD,IAA+DF,IAAI,CAACG,SAApE,IAAiFH,IAAI,CAACI,QAA1F,EAAoG;AAChGC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,MAA5B,EAAoCW,IAAI,CAACC,SAAL,CAAeT,IAAf,CAApC;AACA,aAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAoBC,MAApB,KAAyC;AACxDC,QAAAA,UAAU,CAAC,MAAM;AACbF,UAAAA,OAAO,CAAC;AACJG,YAAAA,IAAI,EAAEd,IADF;AAEJe,YAAAA,MAAM,EAAE;AAFJ,WAAD,CAAP;AAIH,SALS,EAKPC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,IALf,CAAV;AAMH,OAPM,CAAP;AAQH;AACJ;;AACW,SAALC,KAAK,CAACjB,QAAD,EAAmBH,QAAnB,EAAqC;AAC7C,WAAO,IAAIY,OAAJ,CAAY,CAACC,OAAD,EAAoBC,MAApB,KAAyC;AAExD,YAAMO,cAAc,GAAGC,IAAI,CAACnB,QAAQ,GAAGH,QAAZ,CAA3B;AAEA,YAAMuB,QAAQ,GAAGhB,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4BH,cAA5B,CAAjB;;AAEA,UAAIE,QAAJ,EAAc;AACV,cAAMrB,IAAI,GAAGQ,IAAI,CAACe,KAAL,CAAWF,QAAX,CAAb;AAEAR,QAAAA,UAAU,CAAC,MAAM;AACbF,UAAAA,OAAO,CAAC;AACJG,YAAAA,IAAI,EAAEd,IADF;AAEJe,YAAAA,MAAM,EAAE;AAFJ,WAAD,CAAP;AAIH,SALS,EAKPC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,IALf,CAAV;AAMH;;AAEDJ,MAAAA,UAAU,CAAC,MAAM;AACbF,QAAAA,OAAO,CAAC;AACJG,UAAAA,IAAI,EACA;AAAEU,YAAAA,OAAO,EAAE;AAAX,WAFA;AAGJT,UAAAA,MAAM,EAAE;AAHJ,SAAD,CAAP;AAKH,OANS,EAMPC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB,IANf,CAAV;AAOH,KAxBM,CAAP;AAyBH;;AA1CoB","sourcesContent":["import { SignUpFormValues } from \"../components/public/signUp\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype APIResponse = {\r\n    data?: any,\r\n    status: string;\r\n}\r\n\r\nexport default class API {\r\n    static signUp(formValues: SignUpFormValues): Promise<APIResponse> {\r\n        const userID = uuidv4();\r\n        const { password, confirmPassword, ...user } = formValues;\r\n        if (password === confirmPassword && user.username && user.email && user.firstname && user.lastname) {\r\n            window.localStorage.setItem(userID, JSON.stringify(user));\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n    }\r\n    static login(username: string, password: string) {\r\n        return new Promise((resolve: Function, reject: Function) => {\r\n\r\n            const hashedPassword = btoa(username + password);\r\n\r\n            const userJSON = window.localStorage.getItem(hashedPassword);\r\n\r\n            if (userJSON) {\r\n                const user = JSON.parse(userJSON);\r\n\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            }\r\n\r\n            setTimeout(() => {\r\n                resolve({\r\n                    data:\r\n                        { message: \"Could not find user\" },\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}