{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boome\\\\Desktop\\\\vedit\\\\src\\\\contexts\\\\globalContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport API from \"../dataLayer/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalContext = /*#__PURE__*/createContext({\n  state: {\n    loggedIn: false\n  }\n});\nexport function GlobalContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, setState] = useState({\n    loggedIn: false\n  });\n  const navigate = useNavigate();\n\n  const handleDataChange = user => {\n    setState({\n      loggedIn: state.loggedIn,\n      user: user\n    });\n  };\n\n  const handleLogIn = async formValues => {\n    if (formValues.username && formValues.password) {\n      const result = await API.login(formValues.username, formValues.password);\n\n      if (result.status === \"success\") {\n        setState({\n          loggedIn: true,\n          user: result.data\n        });\n        navigate(\"/projects\");\n      }\n    }\n  };\n\n  const handleLogOut = () => {\n    setState({\n      loggedIn: false\n    });\n  };\n\n  const ProviderObj = useMemo(() => ({\n    state,\n    onLogin: handleLogIn,\n    onLogout: handleLogOut,\n    refreshData: handleDataChange\n  }), [state]);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: ProviderObj,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalContextProvider, \"uP5+QTyE+xPlw5dWt2KTUpDZXUY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = GlobalContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/contexts/globalContext.tsx"],"names":["createContext","useMemo","useState","useNavigate","API","GlobalContext","state","loggedIn","GlobalContextProvider","children","setState","navigate","handleDataChange","user","handleLogIn","formValues","username","password","result","login","status","data","handleLogOut","ProviderObj","onLogin","onLogout","refreshData"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,OAAnC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;;AA0BA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAgB;AAAEM,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAAT,CAAhB,CAAnC;AAEP,OAAO,SAASC,qBAAT,OACP;AAAA;;AAAA,MADsC;AAAEC,IAAAA;AAAF,GACtC;AACI,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBR,QAAQ,CAAc;AAAEK,IAAAA,QAAQ,EAAE;AAAZ,GAAd,CAAlC;AACA,QAAMI,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,QAAMS,gBAAgB,GAAIC,IAAD,IACzB;AACIH,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,QAAQ,EAAED,KAAK,CAACC,QAAlB;AAA4BM,MAAAA,IAAI,EAAEA;AAAlC,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAAOC,UAAP,IACpB;AACI,QAAIA,UAAU,CAACC,QAAX,IAAuBD,UAAU,CAACE,QAAtC,EACA;AACI,YAAMC,MAAM,GAAG,MAAMd,GAAG,CAACe,KAAJ,CAAUJ,UAAU,CAACC,QAArB,EAA+BD,UAAU,CAACE,QAA1C,CAArB;;AACA,UAAIC,MAAM,CAACE,MAAP,KAAkB,SAAtB,EACA;AACIV,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,QAAQ,EAAE,IAAZ;AAAkBM,UAAAA,IAAI,EAAEK,MAAM,CAACG;AAA/B,SAAD,CAAR;AACAV,QAAAA,QAAQ,CAAC,WAAD,CAAR;AACH;AACJ;AACJ,GAXD;;AAaA,QAAMW,YAAY,GAAG,MACrB;AACIZ,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMgB,WAAW,GAAGtB,OAAO,CAAC,OAAO;AAC/BK,IAAAA,KAD+B;AAE/BkB,IAAAA,OAAO,EAAEV,WAFsB;AAG/BW,IAAAA,QAAQ,EAAEH,YAHqB;AAI/BI,IAAAA,WAAW,EAAEd;AAJkB,GAAP,CAAD,EAKvB,CAACN,KAAD,CALuB,CAA3B;AAOA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEiB,WAA/B;AAAA,cACKd;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GAvCeD,qB;UAGKL,W;;;KAHLK,qB","sourcesContent":["import { createContext, ReactNode, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { LoginFormValues } from \"../components/public/login\";\r\nimport API from \"../dataLayer/api\";\r\n\r\ntype User = {\r\n    email: string;\r\n    id: string;\r\n    pass: string;\r\n    username: string;\r\n    pfp: string;\r\n    projects: Array<{ title: string }>;\r\n}\r\n\r\ntype GlobalState = {\r\n    loggedIn: boolean;\r\n    user?: User;\r\n}\r\n\r\ntype ProviderState = {\r\n    state: GlobalState;\r\n    onLogin?: (formValues: LoginFormValues) => any;\r\n    onLogout?: () => void;\r\n    refreshData?: (user: User) => void;\r\n}\r\n\r\ntype Props = {\r\n    children: ReactNode;\r\n}\r\nexport const GlobalContext = createContext<ProviderState>({ state: { loggedIn: false } });\r\n\r\nexport function GlobalContextProvider({ children }: Props)\r\n{\r\n    const [state, setState] = useState<GlobalState>({ loggedIn: false })\r\n    const navigate = useNavigate();\r\n\r\n    const handleDataChange = (user: User) =>\r\n    {\r\n        setState({ loggedIn: state.loggedIn, user: user });\r\n    }\r\n\r\n    const handleLogIn = async (formValues: LoginFormValues) =>\r\n    {\r\n        if (formValues.username && formValues.password)\r\n        {\r\n            const result = await API.login(formValues.username, formValues.password);\r\n            if (result.status === \"success\")\r\n            {\r\n                setState({ loggedIn: true, user: result.data });\r\n                navigate(\"/projects\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleLogOut = () =>\r\n    {\r\n        setState({ loggedIn: false });\r\n    }\r\n\r\n    const ProviderObj = useMemo(() => ({\r\n        state,\r\n        onLogin: handleLogIn,\r\n        onLogout: handleLogOut,\r\n        refreshData: handleDataChange\r\n    }), [state])\r\n\r\n    return (\r\n        <GlobalContext.Provider value={ProviderObj}>\r\n            {children}\r\n        </GlobalContext.Provider>)\r\n}"]},"metadata":{},"sourceType":"module"}