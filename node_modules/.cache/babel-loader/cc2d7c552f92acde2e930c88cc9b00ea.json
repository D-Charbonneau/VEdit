{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\n\nfunction checkPassword(pass, confirm) {\n  return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\n}\n\nexport default class API {\n  static signUp(formValues) {\n    const userID = uuidv4();\n    const {\n      password,\n      confirmPassword,\n      ...user\n    } = formValues;\n\n    if (user.username && user.email && password && checkPassword(password, confirmPassword)) {\n      let grabData = window.localStorage.getItem(\"userData\");\n      if (!grabData) grabData = JSON.stringify([]);\n      let oldData = JSON.parse(grabData);\n      oldData.push({ ...user\n      });\n      window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    }\n\n    if (!user.username) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Username\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    } else if (!user.email) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Email\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({\n          data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n  static login(username, password) {\n    return new Promise((resolve, reject) => {\n      const hashedPassword = btoa(username + password);\n      const userJSON = window.localStorage.getItem(hashedPassword);\n\n      if (userJSON) {\n        const user = JSON.parse(userJSON);\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      }\n\n      setTimeout(() => {\n        resolve({\n          data: {\n            message: \"Could not find user\"\n          },\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/dataLayer/api.ts"],"names":["v4","uuidv4","checkPassword","pass","confirm","test","length","API","signUp","formValues","userID","password","confirmPassword","user","username","email","grabData","window","localStorage","getItem","JSON","stringify","oldData","parse","push","setItem","Promise","resolve","reject","setTimeout","data","status","Math","random","login","hashedPassword","btoa","userJSON","message"],"mappings":"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","sourcesContent":["import { SignUpFormValues } from \"../components/public/signUp\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype APIResponse = {\r\n    data?: any,\r\n    status: string;\r\n}\r\n\r\nfunction checkPassword(pass: string, confirm: string) {\r\n    return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\r\n}\r\n\r\nexport default class API {\r\n    static signUp(formValues: SignUpFormValues): Promise<APIResponse> {\r\n        const userID = uuidv4();\r\n        const { password, confirmPassword, ...user } = formValues;\r\n        if (user.username && user.email && password && checkPassword(password, confirmPassword)) {\r\n            let grabData = window.localStorage.getItem(\"userData\");\r\n            if (!grabData)\r\n                grabData = JSON.stringify([]);\r\n            let oldData: any = JSON.parse(grabData);\r\n            oldData.push({...user});\r\n            window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        if (!user.username) {\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: \"Missing Username\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        else if (!user.email) {\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: \"Missing Email\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        return new Promise((resolve: Function, reject: Function) => {\r\n            setTimeout(() => {\r\n                resolve({\r\n                    data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n    static login(username: string, password: string) {\r\n        return new Promise((resolve: Function, reject: Function) => {\r\n\r\n            const hashedPassword = btoa(username + password);\r\n\r\n            const userJSON = window.localStorage.getItem(hashedPassword);\r\n\r\n            if (userJSON) {\r\n                const user = JSON.parse(userJSON);\r\n\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            }\r\n\r\n            setTimeout(() => {\r\n                resolve({\r\n                    data:\r\n                        { message: \"Could not find user\" },\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}