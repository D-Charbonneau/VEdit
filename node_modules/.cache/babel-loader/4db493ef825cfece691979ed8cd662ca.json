{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\n\nfunction checkPassword(pass, confirm) {\n  return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\n}\n\nexport default class API {\n  static signUp(formValues) {\n    const userID = uuidv4();\n    const {\n      password,\n      confirmPassword,\n      ...user\n    } = formValues;\n\n    if (user.username && user.email && password && checkPassword(password, confirmPassword)) {\n      let grabData = window.localStorage.getItem(\"userData\");\n\n      if (!grabData) {\n        grabData = JSON.stringify([]);\n      }\n\n      let oldData = JSON.parse(grabData);\n      const hashedPassword = btoa(password + userID);\n      oldData.push({\n        id: userID,\n        ...user,\n        pass: hashedPassword\n      });\n      window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: user,\n            status: \"success\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    } else if (!user.username) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Username\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    } else if (!user.email) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve({\n            data: \"Missing Email\",\n            status: \"error\"\n          });\n        }, Math.random() * 500 + 1000);\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({\n          data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 1000);\n    });\n  }\n\n  static login(username, password) {\n    return new Promise((resolve, reject) => {\n      let users;\n\n      if (window.localStorage.getItem(\"userData\") !== null) {\n        users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\n      }\n\n      for (let i = 0; i < users.length; i++) {\n        if (users[i].username === username && users[i].pass == btoa(+users[i].id + password)) {\n          setTimeout(() => {\n            resolve({\n              data: users[i],\n              status: \"success\"\n            });\n          }, Math.random() * 500 + 1000);\n        }\n      }\n\n      setTimeout(() => {\n        resolve({\n          data: {\n            message: \"Could not find user or invalid credentials\"\n          },\n          status: \"error\"\n        });\n      }, Math.random() * 500 + 5000);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/boome/Desktop/vedit/src/dataLayer/api.ts"],"names":["v4","uuidv4","checkPassword","pass","confirm","test","length","API","signUp","formValues","userID","password","confirmPassword","user","username","email","grabData","window","localStorage","getItem","JSON","stringify","oldData","parse","hashedPassword","btoa","push","id","setItem","Promise","resolve","reject","setTimeout","data","status","Math","random","login","users","String","i","message"],"mappings":"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","sourcesContent":["import { SignUpFormValues } from \"../components/public/signUp\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype APIResponse = {\r\n    data?: any,\r\n    status: string;\r\n}\r\n\r\nfunction checkPassword(pass: string, confirm: string) {\r\n    return /\\S/.test(pass) && /\\d/.test(pass) && /[a-z]/i.test(pass) && pass.length > 7 && pass === confirm;\r\n}\r\n\r\nexport default class API {\r\n    static signUp(formValues: SignUpFormValues): Promise<APIResponse> {\r\n        const userID = uuidv4();\r\n        const { password, confirmPassword, ...user } = formValues;\r\n        if (user.username && user.email && password && checkPassword(password, confirmPassword)) {\r\n            let grabData = window.localStorage.getItem(\"userData\");\r\n            if (!grabData) {\r\n                grabData = JSON.stringify([]);\r\n            }\r\n            let oldData: any = JSON.parse(grabData);\r\n            const hashedPassword = btoa(password + userID);\r\n            oldData.push({ id: userID, ...user, pass: hashedPassword });\r\n            window.localStorage.setItem(\"userData\", JSON.stringify(oldData));\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: user,\r\n                        status: \"success\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        else if (!user.username) {\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: \"Missing Username\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        else if (!user.email) {\r\n            return new Promise((resolve: Function, reject: Function) => {\r\n                setTimeout(() => {\r\n                    resolve({\r\n                        data: \"Missing Email\",\r\n                        status: \"error\"\r\n                    });\r\n                }, Math.random() * 500 + 1000)\r\n            });\r\n        }\r\n        return new Promise((resolve: Function, reject: Function) => {\r\n            setTimeout(() => {\r\n                resolve({\r\n                    data: \"Invalid Password. (8+ characters, no spaces, at least 1 number and 1 letter)\",\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 1000)\r\n        });\r\n    }\r\n    static login(username: string, password: string) {\r\n        return new Promise((resolve: Function, reject: Function) => {\r\n            let users: any;\r\n            if (window.localStorage.getItem(\"userData\") !== null) {\r\n                users = JSON.parse(String(window.localStorage.getItem(\"userData\")));\r\n            }\r\n\r\n            for (let i = 0; i < users.length; i++) {\r\n                if (users[i].username === username && users[i].pass == btoa(+ users[i].id + password)) {\r\n                    setTimeout(() => {\r\n                        resolve({\r\n                            data: users[i],\r\n                            status: \"success\"\r\n                        });\r\n                    }, Math.random() * 500 + 1000)\r\n                }\r\n            }\r\n            setTimeout(() => {\r\n                resolve({\r\n                    data:\r\n                        { message: \"Could not find user or invalid credentials\" },\r\n                    status: \"error\"\r\n                });\r\n            }, Math.random() * 500 + 5000)\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}